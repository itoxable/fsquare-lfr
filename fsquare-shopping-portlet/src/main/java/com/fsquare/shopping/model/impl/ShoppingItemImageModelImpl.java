package com.fsquare.shopping.model.impl;

import com.fsquare.shopping.model.ShoppingItemImage;
import com.fsquare.shopping.model.ShoppingItemImageModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ShoppingItemImage service. Represents a row in the &quot;FsquareShopping_ShoppingItemImage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.fsquare.shopping.model.ShoppingItemImageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ShoppingItemImageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ShoppingItemImageImpl
 * @see com.fsquare.shopping.model.ShoppingItemImage
 * @see com.fsquare.shopping.model.ShoppingItemImageModel
 * @generated
 */
public class ShoppingItemImageModelImpl extends BaseModelImpl<ShoppingItemImage>
    implements ShoppingItemImageModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a shopping item image model instance should use the {@link com.fsquare.shopping.model.ShoppingItemImage} interface instead.
     */
    public static final String TABLE_NAME = "FsquareShopping_ShoppingItemImage";
    public static final Object[][] TABLE_COLUMNS = {
            { "shoppingItemImageId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "itemId", Types.BIGINT },
            { "imageId", Types.BIGINT },
            { "mainImage", Types.BOOLEAN },
            { "order_", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table FsquareShopping_ShoppingItemImage (shoppingItemImageId LONG not null primary key,groupId LONG,itemId LONG,imageId LONG,mainImage BOOLEAN,order_ INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table FsquareShopping_ShoppingItemImage";
    public static final String ORDER_BY_JPQL = " ORDER BY shoppingItemImage.shoppingItemImageId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY FsquareShopping_ShoppingItemImage.shoppingItemImageId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.fsquare.shopping.model.ShoppingItemImage"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.fsquare.shopping.model.ShoppingItemImage"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.fsquare.shopping.model.ShoppingItemImage"),
            true);
    public static long GROUPID_COLUMN_BITMASK = 1L;
    public static long ITEMID_COLUMN_BITMASK = 2L;
    public static long MAINIMAGE_COLUMN_BITMASK = 4L;
    public static long SHOPPINGITEMIMAGEID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.fsquare.shopping.model.ShoppingItemImage"));
    private static ClassLoader _classLoader = ShoppingItemImage.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ShoppingItemImage.class
        };
    private long _shoppingItemImageId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _itemId;
    private long _originalItemId;
    private boolean _setOriginalItemId;
    private long _imageId;
    private boolean _mainImage;
    private boolean _originalMainImage;
    private boolean _setOriginalMainImage;
    private int _order;
    private long _columnBitmask;
    private ShoppingItemImage _escapedModel;

    public ShoppingItemImageModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _shoppingItemImageId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setShoppingItemImageId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _shoppingItemImageId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ShoppingItemImage.class;
    }

    @Override
    public String getModelClassName() {
        return ShoppingItemImage.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("shoppingItemImageId", getShoppingItemImageId());
        attributes.put("groupId", getGroupId());
        attributes.put("itemId", getItemId());
        attributes.put("imageId", getImageId());
        attributes.put("mainImage", getMainImage());
        attributes.put("order", getOrder());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long shoppingItemImageId = (Long) attributes.get("shoppingItemImageId");

        if (shoppingItemImageId != null) {
            setShoppingItemImageId(shoppingItemImageId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long itemId = (Long) attributes.get("itemId");

        if (itemId != null) {
            setItemId(itemId);
        }

        Long imageId = (Long) attributes.get("imageId");

        if (imageId != null) {
            setImageId(imageId);
        }

        Boolean mainImage = (Boolean) attributes.get("mainImage");

        if (mainImage != null) {
            setMainImage(mainImage);
        }

        Integer order = (Integer) attributes.get("order");

        if (order != null) {
            setOrder(order);
        }
    }

    @Override
    public long getShoppingItemImageId() {
        return _shoppingItemImageId;
    }

    @Override
    public void setShoppingItemImageId(long shoppingItemImageId) {
        _shoppingItemImageId = shoppingItemImageId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public long getItemId() {
        return _itemId;
    }

    @Override
    public void setItemId(long itemId) {
        _columnBitmask |= ITEMID_COLUMN_BITMASK;

        if (!_setOriginalItemId) {
            _setOriginalItemId = true;

            _originalItemId = _itemId;
        }

        _itemId = itemId;
    }

    public long getOriginalItemId() {
        return _originalItemId;
    }

    @Override
    public long getImageId() {
        return _imageId;
    }

    @Override
    public void setImageId(long imageId) {
        _imageId = imageId;
    }

    @Override
    public boolean getMainImage() {
        return _mainImage;
    }

    @Override
    public boolean isMainImage() {
        return _mainImage;
    }

    @Override
    public void setMainImage(boolean mainImage) {
        _columnBitmask |= MAINIMAGE_COLUMN_BITMASK;

        if (!_setOriginalMainImage) {
            _setOriginalMainImage = true;

            _originalMainImage = _mainImage;
        }

        _mainImage = mainImage;
    }

    public boolean getOriginalMainImage() {
        return _originalMainImage;
    }

    @Override
    public int getOrder() {
        return _order;
    }

    @Override
    public void setOrder(int order) {
        _order = order;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            ShoppingItemImage.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ShoppingItemImage toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ShoppingItemImage) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ShoppingItemImageImpl shoppingItemImageImpl = new ShoppingItemImageImpl();

        shoppingItemImageImpl.setShoppingItemImageId(getShoppingItemImageId());
        shoppingItemImageImpl.setGroupId(getGroupId());
        shoppingItemImageImpl.setItemId(getItemId());
        shoppingItemImageImpl.setImageId(getImageId());
        shoppingItemImageImpl.setMainImage(getMainImage());
        shoppingItemImageImpl.setOrder(getOrder());

        shoppingItemImageImpl.resetOriginalValues();

        return shoppingItemImageImpl;
    }

    @Override
    public int compareTo(ShoppingItemImage shoppingItemImage) {
        long primaryKey = shoppingItemImage.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ShoppingItemImage)) {
            return false;
        }

        ShoppingItemImage shoppingItemImage = (ShoppingItemImage) obj;

        long primaryKey = shoppingItemImage.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ShoppingItemImageModelImpl shoppingItemImageModelImpl = this;

        shoppingItemImageModelImpl._originalGroupId = shoppingItemImageModelImpl._groupId;

        shoppingItemImageModelImpl._setOriginalGroupId = false;

        shoppingItemImageModelImpl._originalItemId = shoppingItemImageModelImpl._itemId;

        shoppingItemImageModelImpl._setOriginalItemId = false;

        shoppingItemImageModelImpl._originalMainImage = shoppingItemImageModelImpl._mainImage;

        shoppingItemImageModelImpl._setOriginalMainImage = false;

        shoppingItemImageModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ShoppingItemImage> toCacheModel() {
        ShoppingItemImageCacheModel shoppingItemImageCacheModel = new ShoppingItemImageCacheModel();

        shoppingItemImageCacheModel.shoppingItemImageId = getShoppingItemImageId();

        shoppingItemImageCacheModel.groupId = getGroupId();

        shoppingItemImageCacheModel.itemId = getItemId();

        shoppingItemImageCacheModel.imageId = getImageId();

        shoppingItemImageCacheModel.mainImage = getMainImage();

        shoppingItemImageCacheModel.order = getOrder();

        return shoppingItemImageCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{shoppingItemImageId=");
        sb.append(getShoppingItemImageId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", itemId=");
        sb.append(getItemId());
        sb.append(", imageId=");
        sb.append(getImageId());
        sb.append(", mainImage=");
        sb.append(getMainImage());
        sb.append(", order=");
        sb.append(getOrder());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.fsquare.shopping.model.ShoppingItemImage");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>shoppingItemImageId</column-name><column-value><![CDATA[");
        sb.append(getShoppingItemImageId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemId</column-name><column-value><![CDATA[");
        sb.append(getItemId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>imageId</column-name><column-value><![CDATA[");
        sb.append(getImageId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mainImage</column-name><column-value><![CDATA[");
        sb.append(getMainImage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>order</column-name><column-value><![CDATA[");
        sb.append(getOrder());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
