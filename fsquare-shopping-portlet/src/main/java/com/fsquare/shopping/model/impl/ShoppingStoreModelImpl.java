package com.fsquare.shopping.model.impl;

import com.fsquare.shopping.model.ShoppingStore;
import com.fsquare.shopping.model.ShoppingStoreModel;
import com.fsquare.shopping.model.ShoppingStoreSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ShoppingStore service. Represents a row in the &quot;FsquareShopping_ShoppingStore&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.fsquare.shopping.model.ShoppingStoreModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ShoppingStoreImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ShoppingStoreImpl
 * @see com.fsquare.shopping.model.ShoppingStore
 * @see com.fsquare.shopping.model.ShoppingStoreModel
 * @generated
 */
@JSON(strict = true)
public class ShoppingStoreModelImpl extends BaseModelImpl<ShoppingStore>
    implements ShoppingStoreModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a shopping store model instance should use the {@link com.fsquare.shopping.model.ShoppingStore} interface instead.
     */
    public static final String TABLE_NAME = "FsquareShopping_ShoppingStore";
    public static final Object[][] TABLE_COLUMNS = {
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "name", Types.VARCHAR },
            { "defaultEmailAddress", Types.VARCHAR },
            { "productsMainPageUuid", Types.VARCHAR },
            { "cartPageUuid", Types.VARCHAR },
            { "checkoutPageUuid", Types.VARCHAR },
            { "onAddToCart", Types.VARCHAR },
            { "currency_", Types.VARCHAR },
            { "country", Types.VARCHAR },
            { "userTypes", Types.VARCHAR },
            { "checkoutPageFullscreen", Types.BOOLEAN },
            { "checkoutCompletePageTemplate", Types.VARCHAR },
            { "orderCreatedEmailTemplate", Types.VARCHAR },
            { "orderShippedEmailTemplate", Types.VARCHAR },
            { "orderCreatedEmailSubject", Types.VARCHAR },
            { "orderCreatedEmailFromAddress", Types.VARCHAR },
            { "integrateWithStripe", Types.BOOLEAN },
            { "stripeTestSecretKey", Types.VARCHAR },
            { "stripeTestPublishableKey", Types.VARCHAR },
            { "stripeTesting", Types.BOOLEAN },
            { "stripeLiveSecretKey", Types.VARCHAR },
            { "stripeLivePublishableKey", Types.VARCHAR },
            { "stripeApiVersion", Types.VARCHAR },
            { "integrateWithBraintree", Types.BOOLEAN },
            { "braintreePrivateKey", Types.VARCHAR },
            { "braintreePublicKey", Types.VARCHAR },
            { "braintreeMerchantId", Types.VARCHAR },
            { "useBraintreeSandbox", Types.BOOLEAN },
            { "braintreeSandboxMerchantId", Types.VARCHAR },
            { "braintreeSandboxPrivateKey", Types.VARCHAR },
            { "braintreeSandboxPublicKey", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table FsquareShopping_ShoppingStore (companyId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(200) null,defaultEmailAddress VARCHAR(75) null,productsMainPageUuid VARCHAR(75) null,cartPageUuid VARCHAR(75) null,checkoutPageUuid VARCHAR(75) null,onAddToCart VARCHAR(75) null,currency_ VARCHAR(75) null,country VARCHAR(75) null,userTypes VARCHAR(75) null,checkoutPageFullscreen BOOLEAN,checkoutCompletePageTemplate TEXT null,orderCreatedEmailTemplate TEXT null,orderShippedEmailTemplate TEXT null,orderCreatedEmailSubject VARCHAR(75) null,orderCreatedEmailFromAddress VARCHAR(75) null,integrateWithStripe BOOLEAN,stripeTestSecretKey VARCHAR(75) null,stripeTestPublishableKey VARCHAR(75) null,stripeTesting BOOLEAN,stripeLiveSecretKey VARCHAR(75) null,stripeLivePublishableKey VARCHAR(75) null,stripeApiVersion VARCHAR(75) null,integrateWithBraintree BOOLEAN,braintreePrivateKey VARCHAR(75) null,braintreePublicKey VARCHAR(75) null,braintreeMerchantId VARCHAR(75) null,useBraintreeSandbox BOOLEAN,braintreeSandboxMerchantId VARCHAR(75) null,braintreeSandboxPrivateKey VARCHAR(75) null,braintreeSandboxPublicKey VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table FsquareShopping_ShoppingStore";
    public static final String ORDER_BY_JPQL = " ORDER BY shoppingStore.companyId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY FsquareShopping_ShoppingStore.companyId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.fsquare.shopping.model.ShoppingStore"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.fsquare.shopping.model.ShoppingStore"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.fsquare.shopping.model.ShoppingStore"));
    private static ClassLoader _classLoader = ShoppingStore.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ShoppingStore.class
        };
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _name;
    private String _defaultEmailAddress;
    private String _productsMainPageUuid;
    private String _cartPageUuid;
    private String _checkoutPageUuid;
    private String _onAddToCart;
    private String _currency;
    private String _country;
    private String _userTypes;
    private boolean _checkoutPageFullscreen;
    private String _checkoutCompletePageTemplate;
    private String _orderCreatedEmailTemplate;
    private String _orderShippedEmailTemplate;
    private String _orderCreatedEmailSubject;
    private String _orderCreatedEmailFromAddress;
    private boolean _integrateWithStripe;
    private String _stripeTestSecretKey;
    private String _stripeTestPublishableKey;
    private boolean _stripeTesting;
    private String _stripeLiveSecretKey;
    private String _stripeLivePublishableKey;
    private String _stripeApiVersion;
    private boolean _integrateWithBraintree;
    private String _braintreePrivateKey;
    private String _braintreePublicKey;
    private String _braintreeMerchantId;
    private boolean _useBraintreeSandbox;
    private String _braintreeSandboxMerchantId;
    private String _braintreeSandboxPrivateKey;
    private String _braintreeSandboxPublicKey;
    private ShoppingStore _escapedModel;

    public ShoppingStoreModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ShoppingStore toModel(ShoppingStoreSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ShoppingStore model = new ShoppingStoreImpl();

        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setName(soapModel.getName());
        model.setDefaultEmailAddress(soapModel.getDefaultEmailAddress());
        model.setProductsMainPageUuid(soapModel.getProductsMainPageUuid());
        model.setCartPageUuid(soapModel.getCartPageUuid());
        model.setCheckoutPageUuid(soapModel.getCheckoutPageUuid());
        model.setOnAddToCart(soapModel.getOnAddToCart());
        model.setCurrency(soapModel.getCurrency());
        model.setCountry(soapModel.getCountry());
        model.setUserTypes(soapModel.getUserTypes());
        model.setCheckoutPageFullscreen(soapModel.getCheckoutPageFullscreen());
        model.setCheckoutCompletePageTemplate(soapModel.getCheckoutCompletePageTemplate());
        model.setOrderCreatedEmailTemplate(soapModel.getOrderCreatedEmailTemplate());
        model.setOrderShippedEmailTemplate(soapModel.getOrderShippedEmailTemplate());
        model.setOrderCreatedEmailSubject(soapModel.getOrderCreatedEmailSubject());
        model.setOrderCreatedEmailFromAddress(soapModel.getOrderCreatedEmailFromAddress());
        model.setIntegrateWithStripe(soapModel.getIntegrateWithStripe());
        model.setStripeTestSecretKey(soapModel.getStripeTestSecretKey());
        model.setStripeTestPublishableKey(soapModel.getStripeTestPublishableKey());
        model.setStripeTesting(soapModel.getStripeTesting());
        model.setStripeLiveSecretKey(soapModel.getStripeLiveSecretKey());
        model.setStripeLivePublishableKey(soapModel.getStripeLivePublishableKey());
        model.setStripeApiVersion(soapModel.getStripeApiVersion());
        model.setIntegrateWithBraintree(soapModel.getIntegrateWithBraintree());
        model.setBraintreePrivateKey(soapModel.getBraintreePrivateKey());
        model.setBraintreePublicKey(soapModel.getBraintreePublicKey());
        model.setBraintreeMerchantId(soapModel.getBraintreeMerchantId());
        model.setUseBraintreeSandbox(soapModel.getUseBraintreeSandbox());
        model.setBraintreeSandboxMerchantId(soapModel.getBraintreeSandboxMerchantId());
        model.setBraintreeSandboxPrivateKey(soapModel.getBraintreeSandboxPrivateKey());
        model.setBraintreeSandboxPublicKey(soapModel.getBraintreeSandboxPublicKey());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ShoppingStore> toModels(ShoppingStoreSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ShoppingStore> models = new ArrayList<ShoppingStore>(soapModels.length);

        for (ShoppingStoreSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _companyId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setCompanyId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _companyId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ShoppingStore.class;
    }

    @Override
    public String getModelClassName() {
        return ShoppingStore.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("name", getName());
        attributes.put("defaultEmailAddress", getDefaultEmailAddress());
        attributes.put("productsMainPageUuid", getProductsMainPageUuid());
        attributes.put("cartPageUuid", getCartPageUuid());
        attributes.put("checkoutPageUuid", getCheckoutPageUuid());
        attributes.put("onAddToCart", getOnAddToCart());
        attributes.put("currency", getCurrency());
        attributes.put("country", getCountry());
        attributes.put("userTypes", getUserTypes());
        attributes.put("checkoutPageFullscreen", getCheckoutPageFullscreen());
        attributes.put("checkoutCompletePageTemplate",
            getCheckoutCompletePageTemplate());
        attributes.put("orderCreatedEmailTemplate",
            getOrderCreatedEmailTemplate());
        attributes.put("orderShippedEmailTemplate",
            getOrderShippedEmailTemplate());
        attributes.put("orderCreatedEmailSubject", getOrderCreatedEmailSubject());
        attributes.put("orderCreatedEmailFromAddress",
            getOrderCreatedEmailFromAddress());
        attributes.put("integrateWithStripe", getIntegrateWithStripe());
        attributes.put("stripeTestSecretKey", getStripeTestSecretKey());
        attributes.put("stripeTestPublishableKey", getStripeTestPublishableKey());
        attributes.put("stripeTesting", getStripeTesting());
        attributes.put("stripeLiveSecretKey", getStripeLiveSecretKey());
        attributes.put("stripeLivePublishableKey", getStripeLivePublishableKey());
        attributes.put("stripeApiVersion", getStripeApiVersion());
        attributes.put("integrateWithBraintree", getIntegrateWithBraintree());
        attributes.put("braintreePrivateKey", getBraintreePrivateKey());
        attributes.put("braintreePublicKey", getBraintreePublicKey());
        attributes.put("braintreeMerchantId", getBraintreeMerchantId());
        attributes.put("useBraintreeSandbox", getUseBraintreeSandbox());
        attributes.put("braintreeSandboxMerchantId",
            getBraintreeSandboxMerchantId());
        attributes.put("braintreeSandboxPrivateKey",
            getBraintreeSandboxPrivateKey());
        attributes.put("braintreeSandboxPublicKey",
            getBraintreeSandboxPublicKey());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String defaultEmailAddress = (String) attributes.get(
                "defaultEmailAddress");

        if (defaultEmailAddress != null) {
            setDefaultEmailAddress(defaultEmailAddress);
        }

        String productsMainPageUuid = (String) attributes.get(
                "productsMainPageUuid");

        if (productsMainPageUuid != null) {
            setProductsMainPageUuid(productsMainPageUuid);
        }

        String cartPageUuid = (String) attributes.get("cartPageUuid");

        if (cartPageUuid != null) {
            setCartPageUuid(cartPageUuid);
        }

        String checkoutPageUuid = (String) attributes.get("checkoutPageUuid");

        if (checkoutPageUuid != null) {
            setCheckoutPageUuid(checkoutPageUuid);
        }

        String onAddToCart = (String) attributes.get("onAddToCart");

        if (onAddToCart != null) {
            setOnAddToCart(onAddToCart);
        }

        String currency = (String) attributes.get("currency");

        if (currency != null) {
            setCurrency(currency);
        }

        String country = (String) attributes.get("country");

        if (country != null) {
            setCountry(country);
        }

        String userTypes = (String) attributes.get("userTypes");

        if (userTypes != null) {
            setUserTypes(userTypes);
        }

        Boolean checkoutPageFullscreen = (Boolean) attributes.get(
                "checkoutPageFullscreen");

        if (checkoutPageFullscreen != null) {
            setCheckoutPageFullscreen(checkoutPageFullscreen);
        }

        String checkoutCompletePageTemplate = (String) attributes.get(
                "checkoutCompletePageTemplate");

        if (checkoutCompletePageTemplate != null) {
            setCheckoutCompletePageTemplate(checkoutCompletePageTemplate);
        }

        String orderCreatedEmailTemplate = (String) attributes.get(
                "orderCreatedEmailTemplate");

        if (orderCreatedEmailTemplate != null) {
            setOrderCreatedEmailTemplate(orderCreatedEmailTemplate);
        }

        String orderShippedEmailTemplate = (String) attributes.get(
                "orderShippedEmailTemplate");

        if (orderShippedEmailTemplate != null) {
            setOrderShippedEmailTemplate(orderShippedEmailTemplate);
        }

        String orderCreatedEmailSubject = (String) attributes.get(
                "orderCreatedEmailSubject");

        if (orderCreatedEmailSubject != null) {
            setOrderCreatedEmailSubject(orderCreatedEmailSubject);
        }

        String orderCreatedEmailFromAddress = (String) attributes.get(
                "orderCreatedEmailFromAddress");

        if (orderCreatedEmailFromAddress != null) {
            setOrderCreatedEmailFromAddress(orderCreatedEmailFromAddress);
        }

        Boolean integrateWithStripe = (Boolean) attributes.get(
                "integrateWithStripe");

        if (integrateWithStripe != null) {
            setIntegrateWithStripe(integrateWithStripe);
        }

        String stripeTestSecretKey = (String) attributes.get(
                "stripeTestSecretKey");

        if (stripeTestSecretKey != null) {
            setStripeTestSecretKey(stripeTestSecretKey);
        }

        String stripeTestPublishableKey = (String) attributes.get(
                "stripeTestPublishableKey");

        if (stripeTestPublishableKey != null) {
            setStripeTestPublishableKey(stripeTestPublishableKey);
        }

        Boolean stripeTesting = (Boolean) attributes.get("stripeTesting");

        if (stripeTesting != null) {
            setStripeTesting(stripeTesting);
        }

        String stripeLiveSecretKey = (String) attributes.get(
                "stripeLiveSecretKey");

        if (stripeLiveSecretKey != null) {
            setStripeLiveSecretKey(stripeLiveSecretKey);
        }

        String stripeLivePublishableKey = (String) attributes.get(
                "stripeLivePublishableKey");

        if (stripeLivePublishableKey != null) {
            setStripeLivePublishableKey(stripeLivePublishableKey);
        }

        String stripeApiVersion = (String) attributes.get("stripeApiVersion");

        if (stripeApiVersion != null) {
            setStripeApiVersion(stripeApiVersion);
        }

        Boolean integrateWithBraintree = (Boolean) attributes.get(
                "integrateWithBraintree");

        if (integrateWithBraintree != null) {
            setIntegrateWithBraintree(integrateWithBraintree);
        }

        String braintreePrivateKey = (String) attributes.get(
                "braintreePrivateKey");

        if (braintreePrivateKey != null) {
            setBraintreePrivateKey(braintreePrivateKey);
        }

        String braintreePublicKey = (String) attributes.get(
                "braintreePublicKey");

        if (braintreePublicKey != null) {
            setBraintreePublicKey(braintreePublicKey);
        }

        String braintreeMerchantId = (String) attributes.get(
                "braintreeMerchantId");

        if (braintreeMerchantId != null) {
            setBraintreeMerchantId(braintreeMerchantId);
        }

        Boolean useBraintreeSandbox = (Boolean) attributes.get(
                "useBraintreeSandbox");

        if (useBraintreeSandbox != null) {
            setUseBraintreeSandbox(useBraintreeSandbox);
        }

        String braintreeSandboxMerchantId = (String) attributes.get(
                "braintreeSandboxMerchantId");

        if (braintreeSandboxMerchantId != null) {
            setBraintreeSandboxMerchantId(braintreeSandboxMerchantId);
        }

        String braintreeSandboxPrivateKey = (String) attributes.get(
                "braintreeSandboxPrivateKey");

        if (braintreeSandboxPrivateKey != null) {
            setBraintreeSandboxPrivateKey(braintreeSandboxPrivateKey);
        }

        String braintreeSandboxPublicKey = (String) attributes.get(
                "braintreeSandboxPublicKey");

        if (braintreeSandboxPublicKey != null) {
            setBraintreeSandboxPublicKey(braintreeSandboxPublicKey);
        }
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public String getDefaultEmailAddress() {
        if (_defaultEmailAddress == null) {
            return StringPool.BLANK;
        } else {
            return _defaultEmailAddress;
        }
    }

    @Override
    public void setDefaultEmailAddress(String defaultEmailAddress) {
        _defaultEmailAddress = defaultEmailAddress;
    }

    @JSON
    @Override
    public String getProductsMainPageUuid() {
        if (_productsMainPageUuid == null) {
            return StringPool.BLANK;
        } else {
            return _productsMainPageUuid;
        }
    }

    @Override
    public void setProductsMainPageUuid(String productsMainPageUuid) {
        _productsMainPageUuid = productsMainPageUuid;
    }

    @JSON
    @Override
    public String getCartPageUuid() {
        if (_cartPageUuid == null) {
            return StringPool.BLANK;
        } else {
            return _cartPageUuid;
        }
    }

    @Override
    public void setCartPageUuid(String cartPageUuid) {
        _cartPageUuid = cartPageUuid;
    }

    @JSON
    @Override
    public String getCheckoutPageUuid() {
        if (_checkoutPageUuid == null) {
            return StringPool.BLANK;
        } else {
            return _checkoutPageUuid;
        }
    }

    @Override
    public void setCheckoutPageUuid(String checkoutPageUuid) {
        _checkoutPageUuid = checkoutPageUuid;
    }

    @JSON
    @Override
    public String getOnAddToCart() {
        if (_onAddToCart == null) {
            return StringPool.BLANK;
        } else {
            return _onAddToCart;
        }
    }

    @Override
    public void setOnAddToCart(String onAddToCart) {
        _onAddToCart = onAddToCart;
    }

    @JSON
    @Override
    public String getCurrency() {
        if (_currency == null) {
            return StringPool.BLANK;
        } else {
            return _currency;
        }
    }

    @Override
    public void setCurrency(String currency) {
        _currency = currency;
    }

    @JSON
    @Override
    public String getCountry() {
        if (_country == null) {
            return StringPool.BLANK;
        } else {
            return _country;
        }
    }

    @Override
    public void setCountry(String country) {
        _country = country;
    }

    @JSON
    @Override
    public String getUserTypes() {
        if (_userTypes == null) {
            return StringPool.BLANK;
        } else {
            return _userTypes;
        }
    }

    @Override
    public void setUserTypes(String userTypes) {
        _userTypes = userTypes;
    }

    @JSON
    @Override
    public boolean getCheckoutPageFullscreen() {
        return _checkoutPageFullscreen;
    }

    @Override
    public boolean isCheckoutPageFullscreen() {
        return _checkoutPageFullscreen;
    }

    @Override
    public void setCheckoutPageFullscreen(boolean checkoutPageFullscreen) {
        _checkoutPageFullscreen = checkoutPageFullscreen;
    }

    @JSON
    @Override
    public String getCheckoutCompletePageTemplate() {
        if (_checkoutCompletePageTemplate == null) {
            return StringPool.BLANK;
        } else {
            return _checkoutCompletePageTemplate;
        }
    }

    @Override
    public void setCheckoutCompletePageTemplate(
        String checkoutCompletePageTemplate) {
        _checkoutCompletePageTemplate = checkoutCompletePageTemplate;
    }

    @JSON
    @Override
    public String getOrderCreatedEmailTemplate() {
        if (_orderCreatedEmailTemplate == null) {
            return StringPool.BLANK;
        } else {
            return _orderCreatedEmailTemplate;
        }
    }

    @Override
    public void setOrderCreatedEmailTemplate(String orderCreatedEmailTemplate) {
        _orderCreatedEmailTemplate = orderCreatedEmailTemplate;
    }

    @JSON
    @Override
    public String getOrderShippedEmailTemplate() {
        if (_orderShippedEmailTemplate == null) {
            return StringPool.BLANK;
        } else {
            return _orderShippedEmailTemplate;
        }
    }

    @Override
    public void setOrderShippedEmailTemplate(String orderShippedEmailTemplate) {
        _orderShippedEmailTemplate = orderShippedEmailTemplate;
    }

    @JSON
    @Override
    public String getOrderCreatedEmailSubject() {
        if (_orderCreatedEmailSubject == null) {
            return StringPool.BLANK;
        } else {
            return _orderCreatedEmailSubject;
        }
    }

    @Override
    public void setOrderCreatedEmailSubject(String orderCreatedEmailSubject) {
        _orderCreatedEmailSubject = orderCreatedEmailSubject;
    }

    @JSON
    @Override
    public String getOrderCreatedEmailFromAddress() {
        if (_orderCreatedEmailFromAddress == null) {
            return StringPool.BLANK;
        } else {
            return _orderCreatedEmailFromAddress;
        }
    }

    @Override
    public void setOrderCreatedEmailFromAddress(
        String orderCreatedEmailFromAddress) {
        _orderCreatedEmailFromAddress = orderCreatedEmailFromAddress;
    }

    @JSON
    @Override
    public boolean getIntegrateWithStripe() {
        return _integrateWithStripe;
    }

    @Override
    public boolean isIntegrateWithStripe() {
        return _integrateWithStripe;
    }

    @Override
    public void setIntegrateWithStripe(boolean integrateWithStripe) {
        _integrateWithStripe = integrateWithStripe;
    }

    @JSON
    @Override
    public String getStripeTestSecretKey() {
        if (_stripeTestSecretKey == null) {
            return StringPool.BLANK;
        } else {
            return _stripeTestSecretKey;
        }
    }

    @Override
    public void setStripeTestSecretKey(String stripeTestSecretKey) {
        _stripeTestSecretKey = stripeTestSecretKey;
    }

    @JSON
    @Override
    public String getStripeTestPublishableKey() {
        if (_stripeTestPublishableKey == null) {
            return StringPool.BLANK;
        } else {
            return _stripeTestPublishableKey;
        }
    }

    @Override
    public void setStripeTestPublishableKey(String stripeTestPublishableKey) {
        _stripeTestPublishableKey = stripeTestPublishableKey;
    }

    @JSON
    @Override
    public boolean getStripeTesting() {
        return _stripeTesting;
    }

    @Override
    public boolean isStripeTesting() {
        return _stripeTesting;
    }

    @Override
    public void setStripeTesting(boolean stripeTesting) {
        _stripeTesting = stripeTesting;
    }

    @JSON
    @Override
    public String getStripeLiveSecretKey() {
        if (_stripeLiveSecretKey == null) {
            return StringPool.BLANK;
        } else {
            return _stripeLiveSecretKey;
        }
    }

    @Override
    public void setStripeLiveSecretKey(String stripeLiveSecretKey) {
        _stripeLiveSecretKey = stripeLiveSecretKey;
    }

    @JSON
    @Override
    public String getStripeLivePublishableKey() {
        if (_stripeLivePublishableKey == null) {
            return StringPool.BLANK;
        } else {
            return _stripeLivePublishableKey;
        }
    }

    @Override
    public void setStripeLivePublishableKey(String stripeLivePublishableKey) {
        _stripeLivePublishableKey = stripeLivePublishableKey;
    }

    @JSON
    @Override
    public String getStripeApiVersion() {
        if (_stripeApiVersion == null) {
            return StringPool.BLANK;
        } else {
            return _stripeApiVersion;
        }
    }

    @Override
    public void setStripeApiVersion(String stripeApiVersion) {
        _stripeApiVersion = stripeApiVersion;
    }

    @JSON
    @Override
    public boolean getIntegrateWithBraintree() {
        return _integrateWithBraintree;
    }

    @Override
    public boolean isIntegrateWithBraintree() {
        return _integrateWithBraintree;
    }

    @Override
    public void setIntegrateWithBraintree(boolean integrateWithBraintree) {
        _integrateWithBraintree = integrateWithBraintree;
    }

    @JSON
    @Override
    public String getBraintreePrivateKey() {
        if (_braintreePrivateKey == null) {
            return StringPool.BLANK;
        } else {
            return _braintreePrivateKey;
        }
    }

    @Override
    public void setBraintreePrivateKey(String braintreePrivateKey) {
        _braintreePrivateKey = braintreePrivateKey;
    }

    @JSON
    @Override
    public String getBraintreePublicKey() {
        if (_braintreePublicKey == null) {
            return StringPool.BLANK;
        } else {
            return _braintreePublicKey;
        }
    }

    @Override
    public void setBraintreePublicKey(String braintreePublicKey) {
        _braintreePublicKey = braintreePublicKey;
    }

    @JSON
    @Override
    public String getBraintreeMerchantId() {
        if (_braintreeMerchantId == null) {
            return StringPool.BLANK;
        } else {
            return _braintreeMerchantId;
        }
    }

    @Override
    public void setBraintreeMerchantId(String braintreeMerchantId) {
        _braintreeMerchantId = braintreeMerchantId;
    }

    @JSON
    @Override
    public boolean getUseBraintreeSandbox() {
        return _useBraintreeSandbox;
    }

    @Override
    public boolean isUseBraintreeSandbox() {
        return _useBraintreeSandbox;
    }

    @Override
    public void setUseBraintreeSandbox(boolean useBraintreeSandbox) {
        _useBraintreeSandbox = useBraintreeSandbox;
    }

    @JSON
    @Override
    public String getBraintreeSandboxMerchantId() {
        if (_braintreeSandboxMerchantId == null) {
            return StringPool.BLANK;
        } else {
            return _braintreeSandboxMerchantId;
        }
    }

    @Override
    public void setBraintreeSandboxMerchantId(String braintreeSandboxMerchantId) {
        _braintreeSandboxMerchantId = braintreeSandboxMerchantId;
    }

    @JSON
    @Override
    public String getBraintreeSandboxPrivateKey() {
        if (_braintreeSandboxPrivateKey == null) {
            return StringPool.BLANK;
        } else {
            return _braintreeSandboxPrivateKey;
        }
    }

    @Override
    public void setBraintreeSandboxPrivateKey(String braintreeSandboxPrivateKey) {
        _braintreeSandboxPrivateKey = braintreeSandboxPrivateKey;
    }

    @JSON
    @Override
    public String getBraintreeSandboxPublicKey() {
        if (_braintreeSandboxPublicKey == null) {
            return StringPool.BLANK;
        } else {
            return _braintreeSandboxPublicKey;
        }
    }

    @Override
    public void setBraintreeSandboxPublicKey(String braintreeSandboxPublicKey) {
        _braintreeSandboxPublicKey = braintreeSandboxPublicKey;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            ShoppingStore.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ShoppingStore toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ShoppingStore) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ShoppingStoreImpl shoppingStoreImpl = new ShoppingStoreImpl();

        shoppingStoreImpl.setCompanyId(getCompanyId());
        shoppingStoreImpl.setUserId(getUserId());
        shoppingStoreImpl.setUserName(getUserName());
        shoppingStoreImpl.setCreateDate(getCreateDate());
        shoppingStoreImpl.setModifiedDate(getModifiedDate());
        shoppingStoreImpl.setName(getName());
        shoppingStoreImpl.setDefaultEmailAddress(getDefaultEmailAddress());
        shoppingStoreImpl.setProductsMainPageUuid(getProductsMainPageUuid());
        shoppingStoreImpl.setCartPageUuid(getCartPageUuid());
        shoppingStoreImpl.setCheckoutPageUuid(getCheckoutPageUuid());
        shoppingStoreImpl.setOnAddToCart(getOnAddToCart());
        shoppingStoreImpl.setCurrency(getCurrency());
        shoppingStoreImpl.setCountry(getCountry());
        shoppingStoreImpl.setUserTypes(getUserTypes());
        shoppingStoreImpl.setCheckoutPageFullscreen(getCheckoutPageFullscreen());
        shoppingStoreImpl.setCheckoutCompletePageTemplate(getCheckoutCompletePageTemplate());
        shoppingStoreImpl.setOrderCreatedEmailTemplate(getOrderCreatedEmailTemplate());
        shoppingStoreImpl.setOrderShippedEmailTemplate(getOrderShippedEmailTemplate());
        shoppingStoreImpl.setOrderCreatedEmailSubject(getOrderCreatedEmailSubject());
        shoppingStoreImpl.setOrderCreatedEmailFromAddress(getOrderCreatedEmailFromAddress());
        shoppingStoreImpl.setIntegrateWithStripe(getIntegrateWithStripe());
        shoppingStoreImpl.setStripeTestSecretKey(getStripeTestSecretKey());
        shoppingStoreImpl.setStripeTestPublishableKey(getStripeTestPublishableKey());
        shoppingStoreImpl.setStripeTesting(getStripeTesting());
        shoppingStoreImpl.setStripeLiveSecretKey(getStripeLiveSecretKey());
        shoppingStoreImpl.setStripeLivePublishableKey(getStripeLivePublishableKey());
        shoppingStoreImpl.setStripeApiVersion(getStripeApiVersion());
        shoppingStoreImpl.setIntegrateWithBraintree(getIntegrateWithBraintree());
        shoppingStoreImpl.setBraintreePrivateKey(getBraintreePrivateKey());
        shoppingStoreImpl.setBraintreePublicKey(getBraintreePublicKey());
        shoppingStoreImpl.setBraintreeMerchantId(getBraintreeMerchantId());
        shoppingStoreImpl.setUseBraintreeSandbox(getUseBraintreeSandbox());
        shoppingStoreImpl.setBraintreeSandboxMerchantId(getBraintreeSandboxMerchantId());
        shoppingStoreImpl.setBraintreeSandboxPrivateKey(getBraintreeSandboxPrivateKey());
        shoppingStoreImpl.setBraintreeSandboxPublicKey(getBraintreeSandboxPublicKey());

        shoppingStoreImpl.resetOriginalValues();

        return shoppingStoreImpl;
    }

    @Override
    public int compareTo(ShoppingStore shoppingStore) {
        long primaryKey = shoppingStore.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ShoppingStore)) {
            return false;
        }

        ShoppingStore shoppingStore = (ShoppingStore) obj;

        long primaryKey = shoppingStore.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ShoppingStore> toCacheModel() {
        ShoppingStoreCacheModel shoppingStoreCacheModel = new ShoppingStoreCacheModel();

        shoppingStoreCacheModel.companyId = getCompanyId();

        shoppingStoreCacheModel.userId = getUserId();

        shoppingStoreCacheModel.userName = getUserName();

        String userName = shoppingStoreCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            shoppingStoreCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            shoppingStoreCacheModel.createDate = createDate.getTime();
        } else {
            shoppingStoreCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            shoppingStoreCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            shoppingStoreCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        shoppingStoreCacheModel.name = getName();

        String name = shoppingStoreCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            shoppingStoreCacheModel.name = null;
        }

        shoppingStoreCacheModel.defaultEmailAddress = getDefaultEmailAddress();

        String defaultEmailAddress = shoppingStoreCacheModel.defaultEmailAddress;

        if ((defaultEmailAddress != null) &&
                (defaultEmailAddress.length() == 0)) {
            shoppingStoreCacheModel.defaultEmailAddress = null;
        }

        shoppingStoreCacheModel.productsMainPageUuid = getProductsMainPageUuid();

        String productsMainPageUuid = shoppingStoreCacheModel.productsMainPageUuid;

        if ((productsMainPageUuid != null) &&
                (productsMainPageUuid.length() == 0)) {
            shoppingStoreCacheModel.productsMainPageUuid = null;
        }

        shoppingStoreCacheModel.cartPageUuid = getCartPageUuid();

        String cartPageUuid = shoppingStoreCacheModel.cartPageUuid;

        if ((cartPageUuid != null) && (cartPageUuid.length() == 0)) {
            shoppingStoreCacheModel.cartPageUuid = null;
        }

        shoppingStoreCacheModel.checkoutPageUuid = getCheckoutPageUuid();

        String checkoutPageUuid = shoppingStoreCacheModel.checkoutPageUuid;

        if ((checkoutPageUuid != null) && (checkoutPageUuid.length() == 0)) {
            shoppingStoreCacheModel.checkoutPageUuid = null;
        }

        shoppingStoreCacheModel.onAddToCart = getOnAddToCart();

        String onAddToCart = shoppingStoreCacheModel.onAddToCart;

        if ((onAddToCart != null) && (onAddToCart.length() == 0)) {
            shoppingStoreCacheModel.onAddToCart = null;
        }

        shoppingStoreCacheModel.currency = getCurrency();

        String currency = shoppingStoreCacheModel.currency;

        if ((currency != null) && (currency.length() == 0)) {
            shoppingStoreCacheModel.currency = null;
        }

        shoppingStoreCacheModel.country = getCountry();

        String country = shoppingStoreCacheModel.country;

        if ((country != null) && (country.length() == 0)) {
            shoppingStoreCacheModel.country = null;
        }

        shoppingStoreCacheModel.userTypes = getUserTypes();

        String userTypes = shoppingStoreCacheModel.userTypes;

        if ((userTypes != null) && (userTypes.length() == 0)) {
            shoppingStoreCacheModel.userTypes = null;
        }

        shoppingStoreCacheModel.checkoutPageFullscreen = getCheckoutPageFullscreen();

        shoppingStoreCacheModel.checkoutCompletePageTemplate = getCheckoutCompletePageTemplate();

        String checkoutCompletePageTemplate = shoppingStoreCacheModel.checkoutCompletePageTemplate;

        if ((checkoutCompletePageTemplate != null) &&
                (checkoutCompletePageTemplate.length() == 0)) {
            shoppingStoreCacheModel.checkoutCompletePageTemplate = null;
        }

        shoppingStoreCacheModel.orderCreatedEmailTemplate = getOrderCreatedEmailTemplate();

        String orderCreatedEmailTemplate = shoppingStoreCacheModel.orderCreatedEmailTemplate;

        if ((orderCreatedEmailTemplate != null) &&
                (orderCreatedEmailTemplate.length() == 0)) {
            shoppingStoreCacheModel.orderCreatedEmailTemplate = null;
        }

        shoppingStoreCacheModel.orderShippedEmailTemplate = getOrderShippedEmailTemplate();

        String orderShippedEmailTemplate = shoppingStoreCacheModel.orderShippedEmailTemplate;

        if ((orderShippedEmailTemplate != null) &&
                (orderShippedEmailTemplate.length() == 0)) {
            shoppingStoreCacheModel.orderShippedEmailTemplate = null;
        }

        shoppingStoreCacheModel.orderCreatedEmailSubject = getOrderCreatedEmailSubject();

        String orderCreatedEmailSubject = shoppingStoreCacheModel.orderCreatedEmailSubject;

        if ((orderCreatedEmailSubject != null) &&
                (orderCreatedEmailSubject.length() == 0)) {
            shoppingStoreCacheModel.orderCreatedEmailSubject = null;
        }

        shoppingStoreCacheModel.orderCreatedEmailFromAddress = getOrderCreatedEmailFromAddress();

        String orderCreatedEmailFromAddress = shoppingStoreCacheModel.orderCreatedEmailFromAddress;

        if ((orderCreatedEmailFromAddress != null) &&
                (orderCreatedEmailFromAddress.length() == 0)) {
            shoppingStoreCacheModel.orderCreatedEmailFromAddress = null;
        }

        shoppingStoreCacheModel.integrateWithStripe = getIntegrateWithStripe();

        shoppingStoreCacheModel.stripeTestSecretKey = getStripeTestSecretKey();

        String stripeTestSecretKey = shoppingStoreCacheModel.stripeTestSecretKey;

        if ((stripeTestSecretKey != null) &&
                (stripeTestSecretKey.length() == 0)) {
            shoppingStoreCacheModel.stripeTestSecretKey = null;
        }

        shoppingStoreCacheModel.stripeTestPublishableKey = getStripeTestPublishableKey();

        String stripeTestPublishableKey = shoppingStoreCacheModel.stripeTestPublishableKey;

        if ((stripeTestPublishableKey != null) &&
                (stripeTestPublishableKey.length() == 0)) {
            shoppingStoreCacheModel.stripeTestPublishableKey = null;
        }

        shoppingStoreCacheModel.stripeTesting = getStripeTesting();

        shoppingStoreCacheModel.stripeLiveSecretKey = getStripeLiveSecretKey();

        String stripeLiveSecretKey = shoppingStoreCacheModel.stripeLiveSecretKey;

        if ((stripeLiveSecretKey != null) &&
                (stripeLiveSecretKey.length() == 0)) {
            shoppingStoreCacheModel.stripeLiveSecretKey = null;
        }

        shoppingStoreCacheModel.stripeLivePublishableKey = getStripeLivePublishableKey();

        String stripeLivePublishableKey = shoppingStoreCacheModel.stripeLivePublishableKey;

        if ((stripeLivePublishableKey != null) &&
                (stripeLivePublishableKey.length() == 0)) {
            shoppingStoreCacheModel.stripeLivePublishableKey = null;
        }

        shoppingStoreCacheModel.stripeApiVersion = getStripeApiVersion();

        String stripeApiVersion = shoppingStoreCacheModel.stripeApiVersion;

        if ((stripeApiVersion != null) && (stripeApiVersion.length() == 0)) {
            shoppingStoreCacheModel.stripeApiVersion = null;
        }

        shoppingStoreCacheModel.integrateWithBraintree = getIntegrateWithBraintree();

        shoppingStoreCacheModel.braintreePrivateKey = getBraintreePrivateKey();

        String braintreePrivateKey = shoppingStoreCacheModel.braintreePrivateKey;

        if ((braintreePrivateKey != null) &&
                (braintreePrivateKey.length() == 0)) {
            shoppingStoreCacheModel.braintreePrivateKey = null;
        }

        shoppingStoreCacheModel.braintreePublicKey = getBraintreePublicKey();

        String braintreePublicKey = shoppingStoreCacheModel.braintreePublicKey;

        if ((braintreePublicKey != null) && (braintreePublicKey.length() == 0)) {
            shoppingStoreCacheModel.braintreePublicKey = null;
        }

        shoppingStoreCacheModel.braintreeMerchantId = getBraintreeMerchantId();

        String braintreeMerchantId = shoppingStoreCacheModel.braintreeMerchantId;

        if ((braintreeMerchantId != null) &&
                (braintreeMerchantId.length() == 0)) {
            shoppingStoreCacheModel.braintreeMerchantId = null;
        }

        shoppingStoreCacheModel.useBraintreeSandbox = getUseBraintreeSandbox();

        shoppingStoreCacheModel.braintreeSandboxMerchantId = getBraintreeSandboxMerchantId();

        String braintreeSandboxMerchantId = shoppingStoreCacheModel.braintreeSandboxMerchantId;

        if ((braintreeSandboxMerchantId != null) &&
                (braintreeSandboxMerchantId.length() == 0)) {
            shoppingStoreCacheModel.braintreeSandboxMerchantId = null;
        }

        shoppingStoreCacheModel.braintreeSandboxPrivateKey = getBraintreeSandboxPrivateKey();

        String braintreeSandboxPrivateKey = shoppingStoreCacheModel.braintreeSandboxPrivateKey;

        if ((braintreeSandboxPrivateKey != null) &&
                (braintreeSandboxPrivateKey.length() == 0)) {
            shoppingStoreCacheModel.braintreeSandboxPrivateKey = null;
        }

        shoppingStoreCacheModel.braintreeSandboxPublicKey = getBraintreeSandboxPublicKey();

        String braintreeSandboxPublicKey = shoppingStoreCacheModel.braintreeSandboxPublicKey;

        if ((braintreeSandboxPublicKey != null) &&
                (braintreeSandboxPublicKey.length() == 0)) {
            shoppingStoreCacheModel.braintreeSandboxPublicKey = null;
        }

        return shoppingStoreCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(71);

        sb.append("{companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", defaultEmailAddress=");
        sb.append(getDefaultEmailAddress());
        sb.append(", productsMainPageUuid=");
        sb.append(getProductsMainPageUuid());
        sb.append(", cartPageUuid=");
        sb.append(getCartPageUuid());
        sb.append(", checkoutPageUuid=");
        sb.append(getCheckoutPageUuid());
        sb.append(", onAddToCart=");
        sb.append(getOnAddToCart());
        sb.append(", currency=");
        sb.append(getCurrency());
        sb.append(", country=");
        sb.append(getCountry());
        sb.append(", userTypes=");
        sb.append(getUserTypes());
        sb.append(", checkoutPageFullscreen=");
        sb.append(getCheckoutPageFullscreen());
        sb.append(", checkoutCompletePageTemplate=");
        sb.append(getCheckoutCompletePageTemplate());
        sb.append(", orderCreatedEmailTemplate=");
        sb.append(getOrderCreatedEmailTemplate());
        sb.append(", orderShippedEmailTemplate=");
        sb.append(getOrderShippedEmailTemplate());
        sb.append(", orderCreatedEmailSubject=");
        sb.append(getOrderCreatedEmailSubject());
        sb.append(", orderCreatedEmailFromAddress=");
        sb.append(getOrderCreatedEmailFromAddress());
        sb.append(", integrateWithStripe=");
        sb.append(getIntegrateWithStripe());
        sb.append(", stripeTestSecretKey=");
        sb.append(getStripeTestSecretKey());
        sb.append(", stripeTestPublishableKey=");
        sb.append(getStripeTestPublishableKey());
        sb.append(", stripeTesting=");
        sb.append(getStripeTesting());
        sb.append(", stripeLiveSecretKey=");
        sb.append(getStripeLiveSecretKey());
        sb.append(", stripeLivePublishableKey=");
        sb.append(getStripeLivePublishableKey());
        sb.append(", stripeApiVersion=");
        sb.append(getStripeApiVersion());
        sb.append(", integrateWithBraintree=");
        sb.append(getIntegrateWithBraintree());
        sb.append(", braintreePrivateKey=");
        sb.append(getBraintreePrivateKey());
        sb.append(", braintreePublicKey=");
        sb.append(getBraintreePublicKey());
        sb.append(", braintreeMerchantId=");
        sb.append(getBraintreeMerchantId());
        sb.append(", useBraintreeSandbox=");
        sb.append(getUseBraintreeSandbox());
        sb.append(", braintreeSandboxMerchantId=");
        sb.append(getBraintreeSandboxMerchantId());
        sb.append(", braintreeSandboxPrivateKey=");
        sb.append(getBraintreeSandboxPrivateKey());
        sb.append(", braintreeSandboxPublicKey=");
        sb.append(getBraintreeSandboxPublicKey());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(109);

        sb.append("<model><model-name>");
        sb.append("com.fsquare.shopping.model.ShoppingStore");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>defaultEmailAddress</column-name><column-value><![CDATA[");
        sb.append(getDefaultEmailAddress());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>productsMainPageUuid</column-name><column-value><![CDATA[");
        sb.append(getProductsMainPageUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cartPageUuid</column-name><column-value><![CDATA[");
        sb.append(getCartPageUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>checkoutPageUuid</column-name><column-value><![CDATA[");
        sb.append(getCheckoutPageUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>onAddToCart</column-name><column-value><![CDATA[");
        sb.append(getOnAddToCart());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>currency</column-name><column-value><![CDATA[");
        sb.append(getCurrency());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>country</column-name><column-value><![CDATA[");
        sb.append(getCountry());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userTypes</column-name><column-value><![CDATA[");
        sb.append(getUserTypes());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>checkoutPageFullscreen</column-name><column-value><![CDATA[");
        sb.append(getCheckoutPageFullscreen());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>checkoutCompletePageTemplate</column-name><column-value><![CDATA[");
        sb.append(getCheckoutCompletePageTemplate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>orderCreatedEmailTemplate</column-name><column-value><![CDATA[");
        sb.append(getOrderCreatedEmailTemplate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>orderShippedEmailTemplate</column-name><column-value><![CDATA[");
        sb.append(getOrderShippedEmailTemplate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>orderCreatedEmailSubject</column-name><column-value><![CDATA[");
        sb.append(getOrderCreatedEmailSubject());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>orderCreatedEmailFromAddress</column-name><column-value><![CDATA[");
        sb.append(getOrderCreatedEmailFromAddress());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>integrateWithStripe</column-name><column-value><![CDATA[");
        sb.append(getIntegrateWithStripe());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>stripeTestSecretKey</column-name><column-value><![CDATA[");
        sb.append(getStripeTestSecretKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>stripeTestPublishableKey</column-name><column-value><![CDATA[");
        sb.append(getStripeTestPublishableKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>stripeTesting</column-name><column-value><![CDATA[");
        sb.append(getStripeTesting());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>stripeLiveSecretKey</column-name><column-value><![CDATA[");
        sb.append(getStripeLiveSecretKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>stripeLivePublishableKey</column-name><column-value><![CDATA[");
        sb.append(getStripeLivePublishableKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>stripeApiVersion</column-name><column-value><![CDATA[");
        sb.append(getStripeApiVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>integrateWithBraintree</column-name><column-value><![CDATA[");
        sb.append(getIntegrateWithBraintree());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>braintreePrivateKey</column-name><column-value><![CDATA[");
        sb.append(getBraintreePrivateKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>braintreePublicKey</column-name><column-value><![CDATA[");
        sb.append(getBraintreePublicKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>braintreeMerchantId</column-name><column-value><![CDATA[");
        sb.append(getBraintreeMerchantId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>useBraintreeSandbox</column-name><column-value><![CDATA[");
        sb.append(getUseBraintreeSandbox());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>braintreeSandboxMerchantId</column-name><column-value><![CDATA[");
        sb.append(getBraintreeSandboxMerchantId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>braintreeSandboxPrivateKey</column-name><column-value><![CDATA[");
        sb.append(getBraintreeSandboxPrivateKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>braintreeSandboxPublicKey</column-name><column-value><![CDATA[");
        sb.append(getBraintreeSandboxPublicKey());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
