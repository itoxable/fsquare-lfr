package com.fsquare.shopping.model.impl;

import com.fsquare.shopping.model.ShoppingItem;
import com.fsquare.shopping.model.ShoppingItemModel;
import com.fsquare.shopping.model.ShoppingItemSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ShoppingItem service. Represents a row in the &quot;FsquareShopping_ShoppingItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.fsquare.shopping.model.ShoppingItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ShoppingItemImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ShoppingItemImpl
 * @see com.fsquare.shopping.model.ShoppingItem
 * @see com.fsquare.shopping.model.ShoppingItemModel
 * @generated
 */
@JSON(strict = true)
public class ShoppingItemModelImpl extends BaseModelImpl<ShoppingItem>
    implements ShoppingItemModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a shopping item model instance should use the {@link com.fsquare.shopping.model.ShoppingItem} interface instead.
     */
    public static final String TABLE_NAME = "FsquareShopping_ShoppingItem";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "itemId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "classNameId", Types.BIGINT },
            { "classPK", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "price", Types.DOUBLE },
            { "discountPrice", Types.DOUBLE },
            { "sku", Types.VARCHAR },
            { "itemTypeId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table FsquareShopping_ShoppingItem (uuid_ VARCHAR(75) null,itemId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,classNameId LONG,classPK LONG,name VARCHAR(75) null,description VARCHAR(75) null,price DOUBLE,discountPrice DOUBLE,sku VARCHAR(75) null,itemTypeId LONG)";
    public static final String TABLE_SQL_DROP = "drop table FsquareShopping_ShoppingItem";
    public static final String ORDER_BY_JPQL = " ORDER BY shoppingItem.itemId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY FsquareShopping_ShoppingItem.itemId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.fsquare.shopping.model.ShoppingItem"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.fsquare.shopping.model.ShoppingItem"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.fsquare.shopping.model.ShoppingItem"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long UUID_COLUMN_BITMASK = 4L;
    public static long ITEMID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.fsquare.shopping.model.ShoppingItem"));
    private static ClassLoader _classLoader = ShoppingItem.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ShoppingItem.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _itemId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private long _classNameId;
    private long _classPK;
    private String _name;
    private String _description;
    private double _price;
    private double _discountPrice;
    private String _sku;
    private long _itemTypeId;
    private long _columnBitmask;
    private ShoppingItem _escapedModel;

    public ShoppingItemModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ShoppingItem toModel(ShoppingItemSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ShoppingItem model = new ShoppingItemImpl();

        model.setUuid(soapModel.getUuid());
        model.setItemId(soapModel.getItemId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setClassNameId(soapModel.getClassNameId());
        model.setClassPK(soapModel.getClassPK());
        model.setName(soapModel.getName());
        model.setDescription(soapModel.getDescription());
        model.setPrice(soapModel.getPrice());
        model.setDiscountPrice(soapModel.getDiscountPrice());
        model.setSku(soapModel.getSku());
        model.setItemTypeId(soapModel.getItemTypeId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ShoppingItem> toModels(ShoppingItemSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ShoppingItem> models = new ArrayList<ShoppingItem>(soapModels.length);

        for (ShoppingItemSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _itemId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setItemId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _itemId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ShoppingItem.class;
    }

    @Override
    public String getModelClassName() {
        return ShoppingItem.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("itemId", getItemId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("classNameId", getClassNameId());
        attributes.put("classPK", getClassPK());
        attributes.put("name", getName());
        attributes.put("description", getDescription());
        attributes.put("price", getPrice());
        attributes.put("discountPrice", getDiscountPrice());
        attributes.put("sku", getSku());
        attributes.put("itemTypeId", getItemTypeId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long itemId = (Long) attributes.get("itemId");

        if (itemId != null) {
            setItemId(itemId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Long classNameId = (Long) attributes.get("classNameId");

        if (classNameId != null) {
            setClassNameId(classNameId);
        }

        Long classPK = (Long) attributes.get("classPK");

        if (classPK != null) {
            setClassPK(classPK);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        Double price = (Double) attributes.get("price");

        if (price != null) {
            setPrice(price);
        }

        Double discountPrice = (Double) attributes.get("discountPrice");

        if (discountPrice != null) {
            setDiscountPrice(discountPrice);
        }

        String sku = (String) attributes.get("sku");

        if (sku != null) {
            setSku(sku);
        }

        Long itemTypeId = (Long) attributes.get("itemTypeId");

        if (itemTypeId != null) {
            setItemTypeId(itemTypeId);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    @Override
    public long getItemId() {
        return _itemId;
    }

    @Override
    public void setItemId(long itemId) {
        _itemId = itemId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getClassName() {
        if (getClassNameId() <= 0) {
            return StringPool.BLANK;
        }

        return PortalUtil.getClassName(getClassNameId());
    }

    @Override
    public void setClassName(String className) {
        long classNameId = 0;

        if (Validator.isNotNull(className)) {
            classNameId = PortalUtil.getClassNameId(className);
        }

        setClassNameId(classNameId);
    }

    @JSON
    @Override
    public long getClassNameId() {
        return _classNameId;
    }

    @Override
    public void setClassNameId(long classNameId) {
        _classNameId = classNameId;
    }

    @JSON
    @Override
    public long getClassPK() {
        return _classPK;
    }

    @Override
    public void setClassPK(long classPK) {
        _classPK = classPK;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public double getPrice() {
        return _price;
    }

    @Override
    public void setPrice(double price) {
        _price = price;
    }

    @JSON
    @Override
    public double getDiscountPrice() {
        return _discountPrice;
    }

    @Override
    public void setDiscountPrice(double discountPrice) {
        _discountPrice = discountPrice;
    }

    @JSON
    @Override
    public String getSku() {
        if (_sku == null) {
            return StringPool.BLANK;
        } else {
            return _sku;
        }
    }

    @Override
    public void setSku(String sku) {
        _sku = sku;
    }

    @JSON
    @Override
    public long getItemTypeId() {
        return _itemTypeId;
    }

    @Override
    public void setItemTypeId(long itemTypeId) {
        _itemTypeId = itemTypeId;
    }

    @Override
    public StagedModelType getStagedModelType() {
        return new StagedModelType(PortalUtil.getClassNameId(
                ShoppingItem.class.getName()), getClassNameId());
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            ShoppingItem.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ShoppingItem toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ShoppingItem) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ShoppingItemImpl shoppingItemImpl = new ShoppingItemImpl();

        shoppingItemImpl.setUuid(getUuid());
        shoppingItemImpl.setItemId(getItemId());
        shoppingItemImpl.setGroupId(getGroupId());
        shoppingItemImpl.setCompanyId(getCompanyId());
        shoppingItemImpl.setUserId(getUserId());
        shoppingItemImpl.setUserName(getUserName());
        shoppingItemImpl.setCreateDate(getCreateDate());
        shoppingItemImpl.setModifiedDate(getModifiedDate());
        shoppingItemImpl.setClassNameId(getClassNameId());
        shoppingItemImpl.setClassPK(getClassPK());
        shoppingItemImpl.setName(getName());
        shoppingItemImpl.setDescription(getDescription());
        shoppingItemImpl.setPrice(getPrice());
        shoppingItemImpl.setDiscountPrice(getDiscountPrice());
        shoppingItemImpl.setSku(getSku());
        shoppingItemImpl.setItemTypeId(getItemTypeId());

        shoppingItemImpl.resetOriginalValues();

        return shoppingItemImpl;
    }

    @Override
    public int compareTo(ShoppingItem shoppingItem) {
        long primaryKey = shoppingItem.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ShoppingItem)) {
            return false;
        }

        ShoppingItem shoppingItem = (ShoppingItem) obj;

        long primaryKey = shoppingItem.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ShoppingItemModelImpl shoppingItemModelImpl = this;

        shoppingItemModelImpl._originalUuid = shoppingItemModelImpl._uuid;

        shoppingItemModelImpl._originalGroupId = shoppingItemModelImpl._groupId;

        shoppingItemModelImpl._setOriginalGroupId = false;

        shoppingItemModelImpl._originalCompanyId = shoppingItemModelImpl._companyId;

        shoppingItemModelImpl._setOriginalCompanyId = false;

        shoppingItemModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ShoppingItem> toCacheModel() {
        ShoppingItemCacheModel shoppingItemCacheModel = new ShoppingItemCacheModel();

        shoppingItemCacheModel.uuid = getUuid();

        String uuid = shoppingItemCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            shoppingItemCacheModel.uuid = null;
        }

        shoppingItemCacheModel.itemId = getItemId();

        shoppingItemCacheModel.groupId = getGroupId();

        shoppingItemCacheModel.companyId = getCompanyId();

        shoppingItemCacheModel.userId = getUserId();

        shoppingItemCacheModel.userName = getUserName();

        String userName = shoppingItemCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            shoppingItemCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            shoppingItemCacheModel.createDate = createDate.getTime();
        } else {
            shoppingItemCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            shoppingItemCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            shoppingItemCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        shoppingItemCacheModel.classNameId = getClassNameId();

        shoppingItemCacheModel.classPK = getClassPK();

        shoppingItemCacheModel.name = getName();

        String name = shoppingItemCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            shoppingItemCacheModel.name = null;
        }

        shoppingItemCacheModel.description = getDescription();

        String description = shoppingItemCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            shoppingItemCacheModel.description = null;
        }

        shoppingItemCacheModel.price = getPrice();

        shoppingItemCacheModel.discountPrice = getDiscountPrice();

        shoppingItemCacheModel.sku = getSku();

        String sku = shoppingItemCacheModel.sku;

        if ((sku != null) && (sku.length() == 0)) {
            shoppingItemCacheModel.sku = null;
        }

        shoppingItemCacheModel.itemTypeId = getItemTypeId();

        return shoppingItemCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(33);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", itemId=");
        sb.append(getItemId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", classNameId=");
        sb.append(getClassNameId());
        sb.append(", classPK=");
        sb.append(getClassPK());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", price=");
        sb.append(getPrice());
        sb.append(", discountPrice=");
        sb.append(getDiscountPrice());
        sb.append(", sku=");
        sb.append(getSku());
        sb.append(", itemTypeId=");
        sb.append(getItemTypeId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(52);

        sb.append("<model><model-name>");
        sb.append("com.fsquare.shopping.model.ShoppingItem");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemId</column-name><column-value><![CDATA[");
        sb.append(getItemId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>classNameId</column-name><column-value><![CDATA[");
        sb.append(getClassNameId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>classPK</column-name><column-value><![CDATA[");
        sb.append(getClassPK());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>price</column-name><column-value><![CDATA[");
        sb.append(getPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>discountPrice</column-name><column-value><![CDATA[");
        sb.append(getDiscountPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sku</column-name><column-value><![CDATA[");
        sb.append(getSku());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>itemTypeId</column-name><column-value><![CDATA[");
        sb.append(getItemTypeId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
