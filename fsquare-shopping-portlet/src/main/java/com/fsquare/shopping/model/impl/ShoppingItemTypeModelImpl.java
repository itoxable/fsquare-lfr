package com.fsquare.shopping.model.impl;

import com.fsquare.shopping.model.ShoppingItemType;
import com.fsquare.shopping.model.ShoppingItemTypeModel;
import com.fsquare.shopping.model.ShoppingItemTypeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ShoppingItemType service. Represents a row in the &quot;FsquareShopping_ShoppingItemType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.fsquare.shopping.model.ShoppingItemTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ShoppingItemTypeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ShoppingItemTypeImpl
 * @see com.fsquare.shopping.model.ShoppingItemType
 * @see com.fsquare.shopping.model.ShoppingItemTypeModel
 * @generated
 */
@JSON(strict = true)
public class ShoppingItemTypeModelImpl extends BaseModelImpl<ShoppingItemType>
    implements ShoppingItemTypeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a shopping item type model instance should use the {@link com.fsquare.shopping.model.ShoppingItemType} interface instead.
     */
    public static final String TABLE_NAME = "FsquareShopping_ShoppingItemType";
    public static final Object[][] TABLE_COLUMNS = {
            { "itemTypeId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table FsquareShopping_ShoppingItemType (itemTypeId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,description VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table FsquareShopping_ShoppingItemType";
    public static final String ORDER_BY_JPQL = " ORDER BY shoppingItemType.itemTypeId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY FsquareShopping_ShoppingItemType.itemTypeId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.fsquare.shopping.model.ShoppingItemType"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.fsquare.shopping.model.ShoppingItemType"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.fsquare.shopping.model.ShoppingItemType"),
            true);
    public static long GROUPID_COLUMN_BITMASK = 1L;
    public static long NAME_COLUMN_BITMASK = 2L;
    public static long ITEMTYPEID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.fsquare.shopping.model.ShoppingItemType"));
    private static ClassLoader _classLoader = ShoppingItemType.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ShoppingItemType.class
        };
    private long _itemTypeId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _name;
    private String _originalName;
    private String _description;
    private long _columnBitmask;
    private ShoppingItemType _escapedModel;

    public ShoppingItemTypeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ShoppingItemType toModel(ShoppingItemTypeSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ShoppingItemType model = new ShoppingItemTypeImpl();

        model.setItemTypeId(soapModel.getItemTypeId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setName(soapModel.getName());
        model.setDescription(soapModel.getDescription());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ShoppingItemType> toModels(
        ShoppingItemTypeSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ShoppingItemType> models = new ArrayList<ShoppingItemType>(soapModels.length);

        for (ShoppingItemTypeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _itemTypeId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setItemTypeId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _itemTypeId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ShoppingItemType.class;
    }

    @Override
    public String getModelClassName() {
        return ShoppingItemType.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("itemTypeId", getItemTypeId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("name", getName());
        attributes.put("description", getDescription());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long itemTypeId = (Long) attributes.get("itemTypeId");

        if (itemTypeId != null) {
            setItemTypeId(itemTypeId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }
    }

    @JSON
    @Override
    public long getItemTypeId() {
        return _itemTypeId;
    }

    @Override
    public void setItemTypeId(long itemTypeId) {
        _itemTypeId = itemTypeId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _columnBitmask |= NAME_COLUMN_BITMASK;

        if (_originalName == null) {
            _originalName = _name;
        }

        _name = name;
    }

    public String getOriginalName() {
        return GetterUtil.getString(_originalName);
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            ShoppingItemType.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ShoppingItemType toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ShoppingItemType) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ShoppingItemTypeImpl shoppingItemTypeImpl = new ShoppingItemTypeImpl();

        shoppingItemTypeImpl.setItemTypeId(getItemTypeId());
        shoppingItemTypeImpl.setGroupId(getGroupId());
        shoppingItemTypeImpl.setCompanyId(getCompanyId());
        shoppingItemTypeImpl.setUserId(getUserId());
        shoppingItemTypeImpl.setUserName(getUserName());
        shoppingItemTypeImpl.setCreateDate(getCreateDate());
        shoppingItemTypeImpl.setModifiedDate(getModifiedDate());
        shoppingItemTypeImpl.setName(getName());
        shoppingItemTypeImpl.setDescription(getDescription());

        shoppingItemTypeImpl.resetOriginalValues();

        return shoppingItemTypeImpl;
    }

    @Override
    public int compareTo(ShoppingItemType shoppingItemType) {
        long primaryKey = shoppingItemType.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ShoppingItemType)) {
            return false;
        }

        ShoppingItemType shoppingItemType = (ShoppingItemType) obj;

        long primaryKey = shoppingItemType.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ShoppingItemTypeModelImpl shoppingItemTypeModelImpl = this;

        shoppingItemTypeModelImpl._originalGroupId = shoppingItemTypeModelImpl._groupId;

        shoppingItemTypeModelImpl._setOriginalGroupId = false;

        shoppingItemTypeModelImpl._originalName = shoppingItemTypeModelImpl._name;

        shoppingItemTypeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ShoppingItemType> toCacheModel() {
        ShoppingItemTypeCacheModel shoppingItemTypeCacheModel = new ShoppingItemTypeCacheModel();

        shoppingItemTypeCacheModel.itemTypeId = getItemTypeId();

        shoppingItemTypeCacheModel.groupId = getGroupId();

        shoppingItemTypeCacheModel.companyId = getCompanyId();

        shoppingItemTypeCacheModel.userId = getUserId();

        shoppingItemTypeCacheModel.userName = getUserName();

        String userName = shoppingItemTypeCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            shoppingItemTypeCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            shoppingItemTypeCacheModel.createDate = createDate.getTime();
        } else {
            shoppingItemTypeCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            shoppingItemTypeCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            shoppingItemTypeCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        shoppingItemTypeCacheModel.name = getName();

        String name = shoppingItemTypeCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            shoppingItemTypeCacheModel.name = null;
        }

        shoppingItemTypeCacheModel.description = getDescription();

        String description = shoppingItemTypeCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            shoppingItemTypeCacheModel.description = null;
        }

        return shoppingItemTypeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{itemTypeId=");
        sb.append(getItemTypeId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.fsquare.shopping.model.ShoppingItemType");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>itemTypeId</column-name><column-value><![CDATA[");
        sb.append(getItemTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
